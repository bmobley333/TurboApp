<script>
// global.html //



// ==========================================================================
// === Global Variables ===
// ==========================================================================




// Global Variables from doGet and index.html - scope is all client side code (but not turbo.gs)
// gIndex.CSID     --> User's Character Sheet ID
// gIndex.Email    --> User's gmail address
// gIndex.GameVer  --> Game version from CS 'Game' such as 28.3




const gUI = {
  // === Core Data Arrays ===
  arr: [],        // 2D array of data from the sheet
  rowTag: {},     // Map of row tags to 0-based row indices
  colTag: {},     // Map of column tags to 0-based column indices
  format: {},     // Object containing formatting arrays (bg, fonts, borders, merges, etc.)
  notes: [],
  grid2D: [],
  // 2D array holding references to the created cell DOM elements

  // === State Management ===
  pendingChangesMap: {}, // Holds { 'r,c': newValue } during ability roll cost verification steps
  cellClickInfo: { r: null, c: null, text: null, focusText: null }, // Info about the last clicked cell
  monsterRollResultsHistory: {}, // Stores { rollId: { results: [...], originalAbilityRow: r, allTargetedRows_R: [...] } }
  currentSkRadioChecked: { r: null, c: null }, // Tracks coords of the single checked Sk1/Sk2 box
  buttonOrMenu: { // Tracks the source of the current button or
    // menu action
    isNish: false, // Nish button pressed
    isRoll: false, // Standard Roll button pressed
    isFree: false, // Free button pressed
    isLuck: false // Luck button pressed
  },
  hiddenColumns: new Set(), // Stores indices of currently hidden columns
  hiddenRows: new Set(),    // Stores indices of currently hidden rows
  plainTextLogEntries: [],  // Array to store plain text log entries for GMScreen update
  isSendingLog: false,      // Flag/Lock to prevent concurrent log sends
  isDesignerMode: false,    // Flag for designer mode access >>>

  //
  // === Character RaceClass Info ===
  characterInfo: {
    slotNum: '',
    raceClass: '',
    level: '',
    playerName: '',
    charName: ''
  },

  // === Roll Object State ===
  roll: {
    // --- Input values from Sheet (populated by fClearAndSetGUIRoll) ---
    sk1CB: false,          // Flag: True if roll originated from Sk1 CheckBox column, false if Sk2
    ability_R: '',         // 0-based row index of the ability/gear being rolled
    skMorph: '',           // Raw morph string from sheet ('Morph1' or 'Morph2' col)
    skTyp: '',             // Base skill type string ('Sk', 'Atr', 'Atk', etc.) from sheet ('Sk1Typ' or 'Sk2Typ' col)
    skSk: '',              // Base skill value (numeric >= 1 or '') from sheet ('Sk1' or 'Sk2' col)

    skIsOn: '',            // Raw 'Is On' status from sheet
    skNameID: '',          // Raw ability/gear name from sheet, may include ID ('Ability' col)
    skName: '',
    skAct: '',             // Action Point cost
    skDur: '',             // Raw duration value from sheet

    skMeta: '',            // Raw Meta cost value from sheet
    skUses: '',            // Remaining uses (numeric >= 0 or '') from sheet

    // --- Result values calculated after processing morphs (fProcessMorph, fApplyMorphResults) ---
    resTyp: '',            // Resulting roll type after morphs (defaults to skTyp)
    resSk: '',             // Resulting skill value after skill morphs (base for roll calculation)
    resFlatBase: '',       // Skill override value from '=' morph
    resFlatResult: '',     // Final roll result override from '==' morph
    resDif: '',            // Difficulty value from '^' morph
    resFocus: '',          // Raw Focus Meta color tag ('R'...'B')
    resPlus: '',           // Sum of '+/-[num]' morphs (additive modifier to resSk)
    resPlusPlus: '',       // Sum of '++/--[num]' morphs (additive modifier to final roll)
    resdctMult: '',
    resMult: '',           // Cumulative multiplier from '* / /[num]' morphs (applies to resSk)
    resMultMult: '',       // Cumulative multiplier from '** // //[num]' morphs (applies to final roll)
    resCombine: '',        // Combined skill value calculated from numeric morphs + skSk

    // --- Dice roll results (calculated by fCalcGUIRollRoll, fCalcGUIRollResRoll) ---
    roll: '',              // Raw dice roll result based on resSk and resTyp
    resRoll: '',           // Final roll result after applying roll morphs or override

    // --- Flags & Multi-Roll ---
    isNish: false,         // Flag: true if Nish roll
    isUnSk: false,         // Flag: true if 'un' or 'unsk' morph was present
    isFreeRoll: false,     // Flag: true if 'free' morph or Free button used
    isLuckedRoll: false,   // Flag: true if 'luck' morph or Luck button used
    multiRollCount: 1,     // Number of times to roll (defaults to 1)

    // --- Output Formatting ---
    htmlHeader: ''         // Stores the header HTML string for the roll log entry
  },

  // === Background Data Caches ===
  dbElementsFSData: null,
  dbAbilitiesFSData: null,
  dbCritFSData: null,
  dbGearFSData: null,
  myCsRaceClassFSData: null,
  myCsListFSData: null,
  myKlMyAbilitiesFSData: null,

  // === Configuration & Definitions ===
  manualBorderSections: [ // Defines sections for applying manual borders post-render
    // Each object: { r1, c1, r2, c2 (tags/indices), edges ('t'op, 'b'ottom, 'l'eft, 'r'ight), style? (CSS string) }
    { r1: 'Nish', c1: 'ULNish', r2: 'Nish', c2: 'Nish', edges: 'br' },
    { r1: 'MR', c1: 'ULMR', r2: 'MR', c2: 'MR', edges: 'br' },
    { r1: 'meta', c1: 'ULMeta', r2: 'chnl', c2: 'B', edges: 'r' },
    { r1: 'LuckBox', c1: 'ULLuckBox', r2: 'LuckPlus', c2: 'LuckBox', edges: 'r' },
    { r1: 'Act', c1: 'ULAct', r2: 'ActPlus', c2: 'ActTot', edges: 'r' },
    { r1: 'Health', c1: 'vitPlus', r2: 'VitTbl', c2: 'VitNowPercent', edges: 'br' },
    { r1: 'VerUL', c1: 'CodeVer', r2: 'FrozenHeader', c2: 'CodeVer', edges: 'r' },
    { r1: 'FrozenHeader', c1: 'PermMorph1', r2: 'AbilTblEnd_R', c2: 'Regain', edges: 'br' },
    { r1: 'FrozenHeader', c1: 'PossNum', r2: 'AbilTblEnd_R', c2: 'PossAPTot', edges: 'br' },
    { r1: 'ULMonsterTbl', c1: 'NumMon', r2: 'LastMon_R', c2: 'MonSize', edges: 'br' },
    { r1: 'AstralGauntHeader_R', c1: 'AstralGauntletSlot', r2: 'AstralGauntHeader_R', c2: 'AstralGauntletHeaderEndC', edges: 'r' },
    { r1: 'Chaos2ndHeader', c1: 'AstralGauntletSlot', r2: 'ChaosWrist', c2: 'LastC', edges: 'br' },
    { r1: 'SocketedGearHeader', c1: 'SocketedGearSlot', r2: 'SocketTblEnd', c2: 'LastC', edges: 'br' },

    { r1: 'GearTblHeaderStartR', c1: 'PermMorph1', r2: 'GearTblEnd_R', c2: 'Regain', edges: 'br' },
    { r1: 'GearTblHeaderStartR', c1: 'PossNum', r2: 'GearTblEnd_R', c2: 'PossAPTot', edges: 'br' },
    { r1: 'GearSpe', c1: 'SpeedHeader', r2: 'GearStr', c2: 'GearPlusMR', edges: 'br' },
    { r1: 'GearMRTbl', c1: 'MRHeader', r2: 'GearMRTbl', c2: 'MRHeaderEndC', edges: 'b' },
    { r1: 'GearCarryTbl', c1: 'MRHeader', r2: 'GearCarryTbl', c2: 'MRHeaderEndC', edges: 'b' },
    { r1: 'GearMRTbl', c1: 'GearMRCol1', r2: 'GearCarryTbl', c2: 'LastC', edges: 'br' },
    { r1: 'PossAPTot', c1: 'CurrentEncHeader', r2: 'PossAPTot', c2: 'PossEncTotEndC', edges: 'br' },
    { r1: 'PossEncTot', c1: 'GearAPTotHeader', r2: 'PossEncTot', c2: 'LastC', edges: 'br' }
    // Add { style: '1px solid #888' } to specific objects if dark grey is desired
  ],
  initialHiddenCols: [ // Defines columns initially hidden on load
    { c1: 'Key', c2: 'PermMorph1' },
    { c1: 'PermMorph2', c2: 'PermMorph2' }
    // { c1: 0, c2: 0 }, // Example: Single column using index
  ],
  gearTblCols: [ // Defines columns belonging to the Gear section (for toggling)
    { c1: 'PossNum', c2: 'GearTblEndC' },
  ],
  initialHiddenRows: [ // Defines rows initially hidden on load
    { r1: 'Agi', r2: 'Arc' }
    // { r1: 0, r2: 1 } // Example: Range using indices
  ],
  dropDownBox: [ // Defines ranges for dropdown cells and their choices
    // NOTE: The dropdown abilityNames are created dynamically by fFetchAndApplyAbilityDropdowns
    { // Is On column
      choices: ['','Y','N',1,2,3,4,5,6,7,8,9,10,'P','I','~','E','*'],
      ranges: [ { r1: 'NishAtr_R', c1: 'On', r2: 'AbilTblEnd_R', c2: 'On' } ]
    },
    { // Monster # column
      choices: ['',1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],
      ranges: [ { r1: 'CustMon', c1: 'NumMon', r2: 'LastMon_R', c2: 'NumMon' } ]
    }
  ],
  fontColorRange: [ // Defines ranges for applying specific font colors post-render
    { color: '#FF0000', // Red
      ranges: [ { r1: 'FrozenHeader', c1: 'R', r2: 'FrozenHeader', c2: 'R' },
                { r1: 'ULMonsterTbl', c1: 'MonAtk', r2: 'LastMon_R', c2: 'MonDmg' } ]
    },
    { color: '#FFA500', // Orange
      ranges: [ { r1: 'FrozenHeader', c1: 'O', r2: 'FrozenHeader', c2: 'O' } ]
    },
    { color: '#fcba03', // Gold
      ranges: [ { r1: 'FrozenHeader', c1: 'Y', r2: 'FrozenHeader', c2: 'Y' } ]
    },
    { color: '#008000', // Green
      ranges: [ { r1: 'FrozenHeader', c1: 'G', r2: 'FrozenHeader', c2: 'G' } ]
    },
    { color: '#0000FF', // Blue
      ranges: [ { r1: 'FrozenHeader', c1: 'B', r2: 'FrozenHeader', c2: 'B' } ]
    }
  ],


  // Range //////////////////////////////////////////////////////////////////////
  // Named ranges for easy access to specific cells/areas
  range: { 
    entireAbiliyNGearTables: [
      { r1: 'AbilTblStartR', c1: 'PermMorph1', r2: 'AbilTblEnd_R', c2: 'PossAPTot' },
      { r1: 'GearTblStart_R', c1: 'PermMorph1', r2: 'GearTblEnd_R', c2: 'PossAPTot' }
    ],
    morphs: [
      { r1: 'AbilTblStartR', c1: 'Morph1', r2: 'AbilTblEnd_R', c2: 'Morph1' },
      { r1: 'GearTblStart_R', c1: 'Morph1', r2: 'GearTblEnd_R', c2: 'Morph1' },
      { r1: 'AbilTblStartR', c1: 'Morph2', r2: 'AbilTblEnd_R', c2: 'Morph2' },
      { r1: 'GearTblStart_R', c1: 'Morph2', r2: 'GearTblEnd_R', c2: 'Morph2' }
    ],
    isONDur: [
      { r1: 'NishAtr_R', c1: 'On', r2: 'AbilTblEnd_R', c2: 'On' },
      { r1: 'GearTblStart_R', c1: 'On', r2: 'GearTblEnd_R', c2: 'On' }
    ],
    abilNameNoNish: [
      { r1: 'AbilityStartBelowNish_R', c1: 'Ability', r2: 'AbilTblEnd_R', c2: 'Ability' },
      { r1: 'GearTblStart_R', c1: 'Ability', r2: 'GearTblEnd_R', c2: 'Ability' }
    ],
    sk1sk2CheckBoxes: [ // Defines the Sk1/Sk2 checkbox columns (treated as radio buttons)
      { r1: 'NishAtr_R', c1: 'Sk1ChkBox', r2: 'AbilTblEnd_R', c2: 'Sk1ChkBox'},
      { r1: 'NishAtr_R', c1: 'Sk2ChkBox', r2: 'AbilTblEnd_R', c2: 'Sk2ChkBox'},
      { r1: 'GearTblStart_R', c1: 'Sk1ChkBox', r2: 'GearTblEnd_R', c2: 'Sk1ChkBox'},
      { r1: 'GearTblStart_R', c1: 'Sk2ChkBox', r2: 'GearTblEnd_R', c2: 'Sk2ChkBox'}
    ],
    gearNumCol: [
      { r1: 'NishAtr_R', c1: 'PossNum', r2: 'AbilTblEnd_R', c2: 'PossNum' },
      { r1: 'GearTblStart_R', c1: 'PossNum', r2: 'GearTblEnd_R', c2: 'PossNum' }
    ],
    gearIsWornCol: [
      { r1: 'NishAtr_R', c1: 'PossWorn', r2: 'AbilTblEnd_R', c2: 'PossWorn' },
      { r1: 'GearTblStart_R', c1: 'PossWorn', r2: 'GearTblEnd_R', c2: 'PossWorn' }
    ],
    gearPercOffCol: [
      { r1: 'NishAtr_R', c1: 'PossPerOff', r2: 'AbilTblEnd_R', c2: 'PossPerOff' },
      { r1: 'GearTblStart_R', c1: 'PossPerOff', r2: 'GearTblEnd_R', c2: 'PossPerOff' }
    ],
    gearEncCol: [
      { r1: 'NishAtr_R', c1: 'PossEnc', r2: 'AbilTblEnd_R', c2: 'PossEnc' },
      { r1: 'GearTblStart_R', c1: 'PossEnc', r2: 'GearTblEnd_R', c2: 'PossEnc' }
    ],
    gearApTotalCol: [
      { r1: 'NishAtr_R', c1: 'PossAPTot', r2: 'AbilTblEnd_R', c2: 'PossAPTot' },
      { r1: 'GearTblStart_R', c1: 'PossAPTot', r2: 'GearTblEnd_R', c2: 'PossAPTot' }
    ],
    monsters: { r1: 'CustMon', c1: 'NumMon', r2: 'LastMon_R', c2: 'MonSize' },
    currentNish: { r1: 'Nish', c1: 'Nish', r2: 'Nish', c2: 'Nish' },
    meta: { r1: 'meta', c1: 'R', r2: 'meta', c2: 'B' },
    metaChannel: { r1: 'chnl', c1: 'R', r2: 'chnl', c2: 'B' },
    luckBox: { r1: 'LuckBox', c1: 'LuckBox', r2: 'LuckBox', c2: 'LuckBox' },
    luckBoxPlus: { r1: 'LuckPlus', c1: 'LuckBox', r2: 'LuckPlus', c2: 'LuckBox' },
    actTotal: { r1: 'Act', c1: 'ActTot', r2: 'Act', c2: 'ActTot' },
    actPlus: { r1: 'ActPlus', c1: 'ActTot', r2: 'ActPlus', c2: 'ActTot' },
    fortitudeSk1: { r1: 'For', c1: 'Sk1', r2: 'For', c2: 'Sk1' },
    vitMax: { r1: 'VitTbl', c1: 'vitMax', r2: 'VitTbl', c2: 'vitMax' },
    vitMaxPlus: { r1: 'VitTbl', c1: 'vitPlus', r2: 'VitTbl', c2: 'vitPlus' },
    vit1stWnds: { r1: 'VitTbl', c1: 'vit1st', r2: 'VitTbl', c2: 'vit1st' },
    vit2ndWnds: { r1: 'VitTbl', c1: 'vit2nd', r2: 'VitTbl', c2: 'vit2nd' },
    vit3rdWnds: { r1: 'VitTbl', c1: 'vit3rd', r2: 'VitTbl', c2: 'vit3rd' },
    vitNow: { r1: 'VitTbl', c1: 'vitNow', r2: 'VitTbl', c2: 'vitNow' },
    vitNowPercent: { r1: 'VitTbl', c1: 'VitNowPercent', r2: 'VitTbl', c2: 'VitNowPercent' },
    chaosGems: { r1: 'Chaos1', c1: 'ChaosUses', r2: 'ChaosWrist', c2: 'ChaosAbility' },
    socketedGear: { r1: 'SocketTblStart', c1: 'SocketedGear', r2: 'SocketTblEnd', c2: 'SocketedGems' },
    currentEnc: { r1: 'PossEncTot', c1: 'PossEncTot', r2: 'PossEncTot', c2: 'PossEncTot' },
    gearAPTotal: { r1: 'PossAPTot', c1: 'PossGrandAPTot', r2: 'PossAPTot', c2: 'PossGrandAPTot' }
  },
  rangeCSList: {
    abilitiesNameID: { r1: 'TableFirstRow', c1: 'AbilitiesNameID', r2: 'Calc_LastRow', c2: 'AbilitiesNameID' } // Calc_LastRow is a flag not a tag
  },
  rangeDB: {
    monstersDB: { r1: 'MonTblFirst_R', c1: 'ActiveMonTF', r2: 'MonTblLast_R', c2: 'Notes' }
  },
  list: { // Static lists and values
    skTyp: ['Atr','Sk','Atk','DMG','Def','AR','Str'], // Note free, luck, un, unSk are not skill Types and dealth with elsewhere
    metaColor: ['R','O','Y','G','B'],
    metaFull: [5,4,3,2,1], // Maximums for each meta color
    luckBoxMax: 5,
    actMax: 5,
    clearAbilityColTags_EmptyString: ['PermMorph1','Morph1','Sk1Typ', 'Sk1','On','Ability', 'Condition','Sk2','Sk2Typ','Morph2','PermMorph2','Ver','Notes','Pic','Act','Dur','Rng','MetaCost','Uses','Regain','PossNum','PossName','PossEnc','PossCrEa','PossPerOff','PossCrTot','PossAPEa','PossAPTot'], 
    clearAbilityColTags_False: ['Sk1ChkBox','Sk2ChkBox','PossWorn','PossIsArtifact']
  },

  // === UI Element References ===
  tooltipElement: null,      // Reference to the #cell-tooltip div
  modalElement: null,        // Reference to #image-modal container
  modalImageElement: null,   // Reference to #modal-image img tag
  modalCloseBtn: null,       // Reference to #modal-close-btn span
  modalBackdrop: null,       // Reference to #modal-backdrop div
  messageModalOverlay: null, // Reference to #messageModal div
  messageModalText: null,    // Reference to #messageText p tag
  messageModalCloseButton: null, // Reference to #closeMessageModal button
  promptModalOverlay: null,    // Reference to #promptModal div
  promptModalText: null,       // Reference to #promptText p tag
  promptYesButton: null,       // Reference to #promptYesButton button
  promptNoButton: null,        // Reference to #promptNoButton button

  // === Async/Timing State ===
  startTime: 0,              // Timestamp for tracking load/render time
  lastLogTime: 0,            // Timestamp for tracking delta time between logs
  tooltipTimeoutId: null,    // Stores the timeout ID for the hover delay
  messagePromiseResolve: null, // Function to resolve the message promise
  promptPromiseResolve: null,  // Function to resolve the prompt promise
  promptPromiseReject: null,   // Function to reject the prompt promise

  // === Constants & Settings ===
  HOVER_DELAY_MS: 300,       // Delay before showing tooltip (milliseconds)
  TOOLTIP_OFFSET_Y: 15,      // Tooltip vertical offset from cursor (px)
  TOOLTIP_OFFSET_X: 10,      // Tooltip horizontal offset from cursor (px)
  ROW_HEIGHT_PX: 20,         // Matches grid-auto-rows in style.html, used for sticky offset calculation
  isDebugMode: true,         // Turns console logging on (true) or off (false)
  GMSCREEN_LOG_MAX_CHARS: 40000 // Max characters for GMScreen log cell
};




</script>